# Copyright 2021-2024 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
# Connect specified VM CDROM if CDROM device number is set, or the first
# found CDROM if CDROM device number is not set to the datastore ISO file.
# Parameters:
#   vm_cdrom_device_num (optinal): The CDROM device number. Default is 1.
#   vm_cdrom_iso_file: The datastore ISO file to connect to.
#
- name: "Initialize variables for CDROM config"
  ansible.builtin.set_fact:
    vm_cdrom_device_info: ""
    vm_cdrom_controller_type: "{{ cdrom_controller_type | default('sata') }}"
    vm_cdrom_controller_num: 0
    vm_cdrom_unit_num: 0
    vm_cdrom_iso_summary: "ISO {{ vm_cdrom_iso_file }}"

- name: "Get VM CDROM devices"
  include_tasks: vm_get_cdrom_devices.yml

- name: "Check CDROM device list"
  ansible.builtin.assert:
    that:
      - cdrom_device_list is defined
      - cdrom_device_list | length != 0
    fail_msg: "Not get VM CDROM device info list."

# CDROM drive number is specified
- name: "Get CDROM device 'CD/DVD drive {{ vm_cdrom_device_num }}' to connect ISO file"
  when:
    - vm_cdrom_device_num is defined
    - vm_cdrom_device_num | int >= 1
  block:
    - name: "Find CDROM device with specified lable"
      ansible.builtin.set_fact:
        vm_cdrom_device_label: "{{ cdrom_device_label }}"
        vm_cdrom_devices_with_label: "{{ cdrom_device_list | selectattr('label', 'equalto', cdrom_device_label) }}"
      vars:
        cdrom_device_label: "CD/DVD drive {{ vm_cdrom_device_num }}"

    - name: "The CDROM device with specified label doesn't exist"
      ansible.builtin.fail:
        msg: "Failed to find a CDROM device with label '{{ vm_cdrom_device_label }}'"
      when: vm_cdrom_devices_with_label | length == 0

    - name: "Set fact of VM CDROM device with specified label"
      ansible.builtin.set_fact:
        vm_cdrom_device_info: "{{ vm_cdrom_devices_with_label | first }}"

# CDROM drive number is not specified, will use the first one in the CDROM device list
- name: "Get the first CDROM device to connect ISO file"
  ansible.builtin.set_fact:
    vm_cdrom_device_info: "{{ (cdrom_device_list | sort(attribute='label'))[0] }}"
  when: vm_cdrom_device_num is undefined

- name: "Display the CDROM device info"
  ansible.builtin.debug: var=vm_cdrom_device_info

- name: "Set fact of the CDROM controller type, bus number and unit number"
  ansible.builtin.set_fact:
    vm_cdrom_controller_type: >-
      {{
        vm_cdrom_device_info.controller_label |
        regex_search('(sata|ide).*', '\\1', ignorecase=true) |
        lower
      }}
    vm_cdrom_controller_num: "{{ vm_cdrom_device_info.bus_num }}"
    vm_cdrom_unit_num: "{{ vm_cdrom_device_info.unit_num }}"

# Disconnect the CDROM for a force reconnect
- name: "Disconnect CDROM with other ISO file connected"
  include_tasks: vm_configure_cdrom.yml
  vars:
    cdrom_type: client
    cdrom_controller_type: "{{ vm_cdrom_controller_type }}"
    cdrom_controller_num: "{{ vm_cdrom_controller_num }}"
    cdrom_unit_num: "{{ vm_cdrom_unit_num }}"
    cdrom_state: "present"
  when:
    - vm_cdrom_device_info.connected
    - vm_cdrom_device_info.summary != vm_cdrom_iso_summary

- name: "Connect CDROM device to ISO file"
  include_tasks: vm_configure_cdrom.yml
  vars:
    cdrom_type: iso
    cdrom_iso_file: "{{ vm_cdrom_iso_file }}"
    cdrom_controller_type: "{{ vm_cdrom_controller_type }}"
    cdrom_controller_num: "{{ vm_cdrom_controller_num }}"
    cdrom_unit_num: "{{ vm_cdrom_unit_num }}"
    cdrom_state: "present"
  when: >-
    not (vm_cdrom_device_info.connected and
         vm_cdrom_device_info.summary == vm_cdrom_iso_summary)
