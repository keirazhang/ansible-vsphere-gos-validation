# Copyright 2022-2024 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
# Get the network device manager in guest OS
#
# Set fact of network config file in guest OSes except VMware Photon OS
- name: "Initialize the fact of guest OS network manager as traditional"
  ansible.builtin.set_fact:
    guest_os_network_manager: "traditional"

# Debian and Pardus has NetworkManager, but they still uses traditional ifdown/ifup to manage its network devices
# For other Linux OS, here will firstly check whether "systemd-networkd" or "NetworkManager" is active.
# We use active service as the network device manager
- name: "Set network device manager for {{ guest_os_ansible_distribution }}"
  when: guest_os_ansible_distribution not in ["Debian", "Pardus GNU/Linux", "FreeBSD"]
  block:
    - name: "Check active network service"
      ansible.builtin.shell: "systemctl is-active {{ network_service_name }}"
      ignore_errors: true
      delegate_to: "{{ vm_guest_ip }}"
      with_items: ["systemd-networkd", "NetworkManager"]
      loop_control:
        loop_var: network_service_name
      register: check_active_network_service

    - name: "Set fact of active network service"
      ansible.builtin.set_fact:
        guest_active_network_service: >-
          {{
            check_active_network_service.results |
            selectattr('stdout', 'defined') |
            selectattr('stdout', 'equalto', 'active') |
            map(attribute='network_service_name')
          }}

    - name: "Set fact of network device mananger for {{ vm_guest_os_distribution }}"
      ansible.builtin.set_fact:
        guest_os_network_manager: "{{ guest_active_network_service[0] }}"
      when: guest_active_network_service | length > 0

    # SLES uses netplan to manage network interfaces, which is different from Ubuntu netplan
    - name: "Set fact of network device manager to wicked for {{ vm_guest_os_distribution }}"
      ansible.builtin.set_fact:
        guest_os_network_manager: "wicked"
      when:
        - guest_active_network_service | length == 0
        - guest_os_family == "Suse"

    # Ubuntu server uses netplan to manage network interfaces even though its active service is systemd-networkd
    - name: "Set fact of network device manager to netplan for {{ vm_guest_os_distribution }}"
      ansible.builtin.set_fact:
        guest_os_network_manager: "netplan"
      when:
        - guest_os_network_manager != "NetworkManager"
        - guest_os_ansible_distribution == "Ubuntu"

- name: "Set network device manager to netif for {{ guest_os_ansible_distribution }}"
  ansible.builtin.set_fact:
    guest_os_network_manager: "netif"
  when: guest_os_ansible_distribution == "FreeBSD"
